AWSTemplateFormatVersion: '2010-09-09'
Resources:
# 1. Create VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: my-app-vpc

  # 2. Create a Public Subnet
  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: my-app-public-subnet
  
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: my-app-public-subnet

  # 3. Create an Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: my-app-igw

  # Attach the Internet Gateway to the VPC
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # 4. Create a Security Group for ECS instances (allow HTTP)
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to the ECS instances
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"  # Allow HTTP from anywhere


  # 6. Create the Application Load Balancer
  MyAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-app-alb
      Subnets:
        - Ref: MyPublicSubnet1
        - Ref: MyPublicSubnet2
      SecurityGroups:
        - !Ref MySecurityGroup
      Scheme: internet-facing

  # 7. Create the Target Group
  MyAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-app-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: "200"

  # Define an ECR Repository
  MyAppECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: travel-planner-repo

  # Define an ECS Cluster
  MyAppECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: travel-planner

  # Define the ECS Task Definition
  MyAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: travel-planner-task
      # ExecutionRoleArn: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
      ContainerDefinitions:
        - Name: travel-planner-container
          Image: !Sub "ghcr.io/notenoughauth/travel-planner:latest"
          Memory: 512
          Cpu: 256
          Essential: true

  # Define the ECS Service
  MyAppService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyAppECSCluster
      TaskDefinition: !Ref MyAppTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: travel-planner-container
          ContainerPort: 80
          LoadBalancerName: !Ref MyAppALB  # Load Balancer Name

  # Define EC2 Instance to join the ECS Cluster
  MyAppEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ecs
      SecurityGroups:
        - !Ref MySecurityGroup
      SubnetId: !Ref MyPublicSubnet1
      Tags:
        - Key: Name
          Value: my-app-ec2-instance
